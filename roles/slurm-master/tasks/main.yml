# slurm-master/tasks/main.yml
---
- block:
    - name: Install required SLURM packages (Debian/Ubuntu)
      package:
        name:
          - libpmi0-dev
          - libslurm-dev
          - libslurm-perl
          - libslurmdb-perl
          - slurm-client
          - slurm-wlm-torque
          - sview
        state: '{{ pkg_install_state }}'
    # these are present in some but not all releases of Debian/Ubuntu;
    # rather than writing complex `when:` clauses, it's just easier to
    # try to install them and ignore failure...
    - name: Install optional SLURM packages (Debian/Ubuntu)
      package:
        name:
          - slurm-drmaa-dev
        state: '{{ pkg_install_state }}'
      ignore_errors: yes
  when: 'is_debian_8_or_later or is_ubuntu_15_10_or_later'


- block:
  # since all the SLURM binaries are bundled in a single package
  # `slurm-llnl`, we have to install it and *then* stop all the services
    - name: Install required SLURM packages (older Debian/Ubuntu)
      package:
        name:
          - libpmi0-dev
          - libslurm-dev
          - libslurm-perl
          - libslurmdb-perl
          - slurm-llnl
          - slurm-llnl-sview
          - slurm-llnl-torque
        state: '{{ pkg_install_state }}'
    - service:
        name: 'slurm-llnl'
        enabled: no
        state: stopped
  when: 'is_debian_or_ubuntu and not (is_debian_8_or_later or is_ubuntu_15_10_or_later)'

- name: Set SLURM master playbook params (Debian/Ubuntu)
  set_fact:
    slurmctld_service_name: slurmctld
    slurmctld_packages:
      - mailutils
      - slurmctld
    slurmdbd_service_name: slurmdbd
    slurmdbd_packages:
      - slurmdbd
  when: is_debian_8_or_later or is_ubuntu_15_10_or_later


- name: Set SLURM master playbook params (older Debian/Ubuntu)
  set_fact:
    slurmctld_service_name: slurm-llnl
    slurmctld_packages:
      - mailutils
      - slurm-llnl
    slurmdbd_service_name: slurm-llnl-slurmdbd
    slurmdbd_packages:
      - slurm-llnl-slurmdbd
  when: is_debian_or_ubuntu and not (is_debian_8_or_later or is_ubuntu_15_10_or_later)

- import_tasks: db.yml

- import_tasks: install-slurmdbd.yml

- import_tasks: install-slurmctld.yml

- name: Create cluster in accounting database
  tags:
    - slurm
  shell: |
    sacctmgr --parsable --noheader list cluster | grep '^elasticluster|' \
      || sacctmgr -i -Q add cluster elasticluster

- name: Create an account for default cluster
  tags:
    - slurm
  shell: |
    sacctmgr --immediate --parsable --noheader list account Cluster=elasticluster  | grep '^root|' \
      || sacctmgr -i --quiet add account root Cluster=elasticluster

- name: Add default user to cluster
  tags:
    - slurm
  shell: |
    set -ex
    # add a SLURM account for all non-system users; assume a user is a system user
    # if and only if their home directory is under '/home'
    getent passwd | \
      (while IFS=: read name _ uid gid _ home _; do
        if [ $(expr match "$home" /home) -eq 5 ]; then
          if (sacctmgr --immediate --parsable --noheader list user Account=root | grep "^$name|"); then
            continue
          fi
          sacctmgr --immediate --quiet add user "$name" DefaultAccount=root
        fi
      done)

- name: Create add/del slurm directory if it does not exist
  ansible.builtin.file:
    path: /etc/{{ item }}.d
    state: directory
    mode: '0555'
  loop:
   - adduser
   - deluser
  when: is_ubuntu_20_04

- name: Deploy user add/delete scripts
  tags:
    - slurm
    - multiuser
  copy:
    dest: '/etc/{{item}}.d/slurm'
    src:  'etc/{{item}}.d/slurm'
    owner: root
    group: root
    mode: 0555
  loop:
    - adduser
    - deluser
  when: 'is_debian_compatible and multiuser_cluster|default("true")|bool'

- name: Ensure `slurmctld` is running
  tags:
    - slurm
    - slurmctld
  service:
    name: '{{item}}'
    enabled: yes
    state: started
  loop:
    - '{{slurmctld_service_name}}'
